
##%###################################################################################%##
# IMPORTAR LIBRERÍAS. ====
##%###################################################################################%##

library(ObsPreregistro)

##%###################################################################################%##
# ESTABLECER EL DIRECTORIO DE TRABAJO. ====
##%###################################################################################%##

#setwd(choose.dir())

##%###################################################################################%##
# ESTABLECER LAS SEMANAS Y LOS REGISTROS A TENER EN CUENTA PARA LA REVISIÓN. ====
##%###################################################################################%##

Semana <- "Semanas_24_25"
# Nombre de la carpeta en donde se guardarán los archivos resultantes de la revisión.
Carpeta <- paste0("Revision_", Semana)

# Crear la carpeta que contendrá los archivos resultantes de la revisión. Adicionalmente,
# se creará una subcarpeta para guardar los archivos shape para evaluar las coordenadas
# por fuera de la ruta.
fs::dir_create(file.path(Carpeta, "Shape"))

# Intervalos de registros para revisar.
Registros_Evaluar <- c(19595L, 19956L)


##%###################################################################################%##
# IMPORTAR Y MODELAR LOS DATOS DE PRE-REGISTRO. ====
##%###################################################################################%##

## Importar todos los datos del informe de pre-registro.
Datos_Preregistro <- D_G_Preregistro("http://sepec.aunap.gov.co/Acuicultura/InformePreregistroCaracterizacionAcuiculturaCSV2.csv")

## Filtrar los pre-registros de la vigencia actual.
Datos_Preregistro_Vigencia_Actual <- Datos_Preregistro |> dplyr::filter(anio == 2023)

## Filtrar los pre-registros para evaluar.
Datos_Evaluar <- Datos_Preregistro_Vigencia_Actual |>
  dplyr::filter(dplyr::between(registro, Registros_Evaluar[1], Registros_Evaluar[2]))

## Filtrar los pre-registros anteriormente evaluados.
Preregistros_Antiguos <- Datos_Preregistro |>
  dplyr::filter(colector != "pnud", registro < Registros_Evaluar[1]) |>
  dplyr::select(c("registro", "latitud", "longitud"))

## Obtener un conjunto de datos con características espaciales de los pre-registros que se
## evaluarán.

Datos_Evaluar_SF <- Datos_Evaluar_SF(Datos_Evaluar)


##%###################################################################################%##
# ESTABLECER LOS PARÁMETROS INICIALES PARA GENERAR LAS OBSERVACIONES. ====
##%###################################################################################%##

### Establecer los departamentos y municipios objeto de monitoreo; esto con el fin de
### filtrar el marco de datos de caracterización con dichos parámetros.

Dptos_Evaluar <- unique(Datos_Preregistro_Vigencia_Actual[['departamento']])

Mpios_Evaluar <- unique(Datos_Preregistro_Vigencia_Actual[['municipio']])

Lista_Nombres_Validos <- utils::read.csv("../Nom_UPA.csv")

Lista_Nombres_Auxiliar <- c("la upa no existe", "upa inexistente", "no informa", "no aplica")

##%###################################################################################%##
# IMPORTAR Y MODELAR LOS DATOS GENERALES DE CARACTERIZACIÓN.====
##%###################################################################################%##

# Esto consiste en descargar informe general de los datos de caracterización con el
# objeto de verificar las distancias entre las UPA sistematizadas y las pre-registradas.

## Importar, filtrar y convertir a un objeto SF los datos del informe general filtrados
## de acuerdo con los departamentos y municipios establecidos con anterioridad.

Datos_GC_SF <- D_G_Caracterizacion_SF(
  "http://sepec.aunap.gov.co/Acuicultura/CaracterizacionGranjaAcuiculturaCSV2.csv",
  Dptos_Evaluar,
  Mpios_Evaluar)

##%###################################################################################%##
# GENERACIÓN DE OBSERVACIONES. ====
##%###################################################################################%##

## VERIFICACIÓN DEL NOMBRE DE LAS UPA. ====

Obs_Nombre_UPA <- Obs_Nombre_UPA(Datos_Evaluar, Lista_Nombres_Validos, Lista_Nombres_Auxiliar)
Obs_Nombre_UPA_Inexistente <- Obs_Nombre_UPA_Inexistente(Datos_Evaluar, Lista_Nombres_Auxiliar)
Obs_Nombre_Predio <- Obs_Nombre_Predio(Datos_Evaluar, Lista_Nombres_Auxiliar)


## VERIFICACIÓN DE OTROS CÓDIGOS PARA UNA MISMA UPA. ====

Obs_Codigo_Misma_UPA <- Obs_Codigo_Misma_UPA(Datos_Evaluar, Datos_Preregistro)


## VERIFICACIÓN DE POSIBLES UPA REPETIDAS. ====

Obs_Posibles_UPA_Repetidas <- Obs_Posibles_UPA_Repetidas(Datos_Evaluar, Lista_Nombres_Auxiliar)
Obs_UPA_Repetidas <- Obs_UPA_Repetidas(Datos_Evaluar, Lista_Nombres_Auxiliar)
Obs_Coordenadas_Repetidas <- Obs_Coordenadas_Repetidas(Datos_Evaluar)
Obs_Coordenadas_En_Pregistros_Antiguos <- Obs_Coordenadas_En_Pregistros_Antiguos(Datos_Evaluar, Preregistros_Antiguos)


## VERIFICACIÓN DE ALTITUDES Y DISTANCIAS. ====

Datos_Elevacion <- Datos_Elevacion(Datos_Evaluar_SF)
UPA_Asignadas_SF <- readr::read_delim(
    "../UPA_Monitorear.txt",
    delim = "\t",
    show_col_types = FALSE,
    progress = FALSE) |>
  dplyr::select(c(
    "codigoupa" = "Codigo_UPA",
    "departamento" = "Departamento",
    "municipio" = "Municipio",
    "latitud" = "Latitud",
    "longitud" = "Longitud")) |>
  sf::st_as_sf(coords = c("longitud", "latitud"), crs = 4326)

Obs_Altitudes_UPA <- Obs_Altitudes_UPA(Datos_Elevacion)
Obs_Distancia_Con_UPA_Digitadas <- Obs_Distancia_Con_UPA_Digitadas(Datos_Evaluar_SF, Datos_GC_SF)
Obs_Coordenadas_Preregistro_y_Asignadas <- Obs_Coordenadas_Preregistro_vs_Asignadas(Datos_Evaluar_SF, UPA_Asignadas_SF)


## VERIFICACIÓN DE LOS MUNICIPIOS PRE-REGISTRADOS. ====

Mpio_shp <- sf::st_read("c:/Users/romu5/Downloads/Programas y Material de estudio - QGIS/MGN2021_MPIO_POLITICO/MGN_MPIO_POLITICO.shp") |>
  dplyr::select(c("DPTO_CNMBR", "MPIO_CNMBR", "geometry")) |>
  sf::st_transform(crs = 4326)

Obs_Municipios_Diferentes <- Obs_Municipios_Diferentes(Datos_Evaluar_SF, Mpio_shp)


##%###################################################################################%##
# EXPORTAR EL ARCHIVO CON LOS PRE-REGISTROS QUE SE ESTÁN EVALUANDO. ====
##%###################################################################################%##

# Se exportan los datos de los pre-registros que se están evaluando para verificar:
# --> Coordenadas por fuera de la ruta.
# --> Verificación de centros poblados.
# --> Verificación de las veredas.

Datos_Evaluar_SF |> sf::write_sf(file.path(Carpeta, "Shape/Datos_Evaluar.shp"))

Obs_Coordenadas_Fuera_Ruta <- readxl::read_xlsx("Obs_CentrosPoblados_Veredas_FueraDeRuta.xlsx", sheet = 3)
Obs_Centros_Poblados <- readxl::read_xlsx("Obs_CentrosPoblados_Veredas_FueraDeRuta.xlsx", sheet = 1)
Obs_Veredas <- readxl::read_xlsx("Obs_CentrosPoblados_Veredas_FueraDeRuta.xlsx", sheet = 2)

##%###################################################################################%##
# EXPORTAR LAS OBSERVACIONES. ====
##%###################################################################################%##

## Exportar la relación general de los pre-registros evaluados.

Relacion_General_Observaciones <- Relacion_General_Observaciones(Datos_Evaluar)

writexl::write_xlsx(
  Relacion_General_Observaciones,
  path = file.path(Carpeta, paste0("Relacion_General_Observaciones_", Semana, ".xlsx")),
  format_headers = FALSE)


## Generar una lista que contiene las observaciones de cada uno de los colectores.

Lista_Observaciones_x_Colector <- Lista_Observaciones_x_Colector(Relacion_General_Observaciones)

# Construir un vector booleano con la finalidad de filtrar los pre-registros que se habilitaran de
# los que se enviaran para responder a las observaciones generadas.

Vector_Para_Filtro <- Vector_Para_Filtro(Lista_Observaciones_x_Colector)

# Exportar tabla con los pre-registros que se habilitaran.

Exportar_Encuestas_Para_Habilitar(Lista_Observaciones_x_Colector, Vector_Para_Filtro)

# Exportar tablas con los registros que se enviaran para su verificación.

Exportar_Observaciones_x_Colector(Lista_Observaciones_x_Colector, Vector_Para_Filtro)

