Rev.Nombre.Predio <- Datos.Evaluar |>
dplyr::filter(grepl(expregex_1, .data$predio, ignore.case = TRUE)) |>
dplyr::transmute(
'registro' = .data$registro,
'Observaciones: Nombre predio' =
stringr::str_c(
"El nombre del predio no debe estar condicionado con el estado de existencia ",
"de una granja de acuicultura; dado que en este se podrían adelantar otras ",
"actividades productivas. Si el predio no cuenta con un nombre o el encuestado ",
"desconoce dicha información, debe colocar el nombre del propietario, de la finca o ",
"en su defecto “No Informa”.\n RESPUESTA DEL COLECTOR:"))
invisible(Obs.Nombre.UPA)
}
dplyr::full_join(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente)
Rev.Nombre.UPA <- Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1") |>
dplyr::anti_join(y = Lista.Referencia.Nombres, by = c("Col_Aux_1" = "Nombres")) |>
dplyr::summarise(
"Col_Aux_1" = glue::glue_collapse(stringr::str_to_title(.data$Col_Aux_1), sep = ", ", last = " y "),
.by = c("registro", "nombreupa")) |>
dplyr::transmute(
"registro" = .data$registro,
"Observaciones: Nombre de la UPA" =
glue::glue("Verificar si para el nombre de la UPA la(s) palabra(s): ",
"{Col_Aux_1} se encuentra(n) escrita(s) correctamente.\n",
"RESPUESTA DEL COLECTOR:"))
Rev.Nombre.UPA <- Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1") |>
dplyr::anti_join(y = Lista.Referencia.Nombres, by = c("Col_Aux_1" = "Nombres")) |>
dplyr::summarise(
"Col_Aux_1" = glue::glue_collapse(stringr::str_to_title(.data$Col_Aux_1), sep = ", ", last = " y "),
.by = c("registro", "nombreupa")) |>
dplyr::transmute(
"registro" = .data$registro,
"Observaciones: Nombre de la UPA" =
glue::glue("Verificar si para el nombre de la UPA la(s) palabra(s): ",
"{Col_Aux_1} se encuentra(n) escrita(s) correctamente.\n",
"RESPUESTA DEL COLECTOR:"))
View(Rev.Nombre.UPA)
Rev.Nombre.UPA.Inexistente <- Datos.Evaluar |>
dplyr::transmute(
'registro' = .data$registro,
'Observaciones: Nombre UPA inexistente' =
dplyr::case_when(
.data$existe == "No" & tolower(.data$nombreupa) != "la upa no existe" ~
glue::glue(
"Cuando no exista una UPA en el sitio visitado; el nombre a registrar ",
"en el formulario debe ser 'La UPA no existe'.\n",
"RESPUESTA DEL COLECTOR:"),
.data$existe == "Sí" & grepl(expregex_1, .data$nombreupa, ignore.case = TRUE) ~
glue::glue(
"Cuando exista una UPA en el sitio visitado; el nombre a registrar ",
"en el formulario debe ser el nombre del propietario, de la finca o ",
"en su defecto “No Informa”.\n",
"RESPUESTA DEL COLECTOR:"),
.default = "OK")) |>
dplyr::filter(.data$`Observaciones: Nombre UPA inexistente` != "OK")
Rev.Nombre.Predio <- Datos.Evaluar |>
dplyr::filter(grepl(expregex_1, .data$predio, ignore.case = TRUE)) |>
dplyr::transmute(
'registro' = .data$registro,
'Observaciones: Nombre predio' =
stringr::str_c(
"El nombre del predio no debe estar condicionado con el estado de existencia ",
"de una granja de acuicultura; dado que en este se podrían adelantar otras ",
"actividades productivas. Si el predio no cuenta con un nombre o el encuestado ",
"desconoce dicha información, debe colocar el nombre del propietario, de la finca o ",
"en su defecto “No Informa”.\n RESPUESTA DEL COLECTOR:"))
dplyr::full_join(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente)
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(dplyr::full_join)
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(by = dplyr::join_by(registro)))
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(by = dplyr::join_by("registro")))
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(.x, by = dplyr::join_by("registro")))
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(.x, .y, by = dplyr::join_by("registro")))
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(.x, .y, by = dplyr::join_by("registro"))) |>
invisible()
a <- list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(.x, .y, by = dplyr::join_by("registro"))) |>
invisible()
View(a)
expregex_1 <- "\\bupa\\b|\\bresponde\\b|\\bdio\\b||\\baplica\\b|inex"
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe"))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
expregex_1 <- "\\bupa\\b|\\bresponde\\b|\\bdio\\b|\\baplica\\b|inex"
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " "))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1")
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1") |>
dplyr::anti_join(y = Lista.Referencia.Nombres, by = c("Col_Aux_1" = "Nombres"))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1") |>
dplyr::anti_join(y = Lista.Referencia.Nombres, by = c("Col_Aux_1" = "Nombres")) |>
dplyr::summarise(
"Col_Aux_1" = glue::glue_collapse(stringr::str_to_title(.data$Col_Aux_1), sep = ", ", last = " y "),
.by = c("registro", "nombreupa"))
Datos.Evaluar |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(tolower(.data$nombreupa), pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1") |>
dplyr::anti_join(y = Lista.Referencia.Nombres, by = c("Col_Aux_1" = "Nombres")) |>
dplyr::summarise(
"Col_Aux_1" = glue::glue_collapse(stringr::str_to_title(.data$Col_Aux_1), sep = ", ", last = " y "),
.by = c("registro", "nombreupa")) |>
dplyr::transmute(
"registro" = .data$registro,
"Observaciones: Nombre de la UPA" =
glue::glue("Verificar si para el nombre de la UPA la(s) palabra(s): ",
"{Col_Aux_1} se encuentra(n) escrita(s) correctamente.\n",
"RESPUESTA DEL COLECTOR:"))
Datos.Evaluar |>
dplyr::filter(grepl(expregex_1, .data$predio, ignore.case = TRUE))
Rev.Nombre.Predio <- Datos.Evaluar |>
dplyr::filter(grepl(expregex_1, .data$predio, ignore.case = TRUE))
View(Rev.Nombre.Predio)
list(Rev.Nombre.UPA, Rev.Nombre.UPA.Inexistente, Rev.Nombre.Predio) |>
purrr::reduce(~ dplyr::full_join(.x, .y, by = dplyr::join_by("registro"))) |>
invisible()
Datos.Evaluar |>
dplyr::mutate(dplyr::across(tidyselect::where(is_character),
~ stringr::str_squish(tolower(.x))))
Datos.Evaluar |>
dplyr::mutate(dplyr::across(tidyselect::where(is.character),
~ stringr::str_squish(tolower(.x))))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
tidyselect::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = c("nombreupa",
"departamento",
"municipio",
"centropoblado",
"latitud",
"longitud"))
by_1 <- c("nombreupa",
"departamento",
"municipio",
"centropoblado",
"latitud",
"longitud")
by_1 <- c("nombreupa", "departamento", "municipio", "centropoblado", "latitud", "longitud")
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
tidyselect::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = by_1)
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1, all
.by = dplyr::all_of(by_1))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1)) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: UPA repetidas' =
glue::glue(
"Esta encuesta ya está guardada con el número de registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_1))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1)) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: UPA repetidas' =
glue::glue(
"Esta encuesta ya está guardada con el número de registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_1)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: UPA repetidas"))
Datos.Evaluar |>
dplyr::filter(!grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Datos.Evaluar
Datos.Evaluar |>
dplyr::filter(!grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, y = 31:32))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, z = 31:32))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, z = 31:40))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 0, z = 31:40))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = NA, z = NA))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = NULL, z = NULL))
tibble::tibble(x = NULL, z = NULL)
dplyr::cross_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = NULL, z = NULL))
dplyr::full_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, z = 31:40) |> dplyr::filter(x == 0))
tibble::tibble(x = 1:10, z = 31:40) |> dplyr::filter(x == 0)
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(!grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Datos.Revisar <- Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::filter(!grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Rev.UPA.Repetidas <- Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1)) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: UPA repetidas' =
glue::glue(
"Esta encuesta ya está guardada con el número de pre-registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_1)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: UPA repetidas"))
Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_2)) |>
dplyr::mutate(
'registro_menor' =  suppressWarnings(min(.data$registro)),
'Observaciones: Posibles UPA repetidas' =
glue::glue(
"Esta encuesta posiblemente se encuentra repetida con la del ",
"registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_2)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Posibles UPA repetidas"))
by_2 <- c("nombreupa", "departamento", "municipio", "centropoblado")
Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_2)) |>
dplyr::mutate(
'registro_menor' =  suppressWarnings(min(.data$registro)),
'Observaciones: Posibles UPA repetidas' =
glue::glue(
"Esta encuesta posiblemente se encuentra repetida con la del ",
"registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_2)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Posibles UPA repetidas"))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "Sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x))))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe"))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1")
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::reframe("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::reframe(.data$registro, "Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::deframe(.data$registro, "Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " "))
Datos.Evaluar |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.character),
~ stringr::str_squish(tolower(.x)))) |>
dplyr::select(c("registro", "nombreupa", "existe")) |>
dplyr::filter(.data$existe == "sí", !grepl(expregex_1, .data$nombreupa, ignore.case = TRUE)) |>
dplyr::mutate("Col_Aux_1" = stringr::str_split(.data$nombreupa, pattern = " ")) |>
tidyr::unnest_longer("Col_Aux_1")
Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_2)) |>
dplyr::mutate(
'registro_menor' =  suppressWarnings(min(.data$registro)),
'Observaciones: Posibles UPA repetidas' =
glue::glue(
"Esta encuesta posiblemente se encuentra repetida con la del ",
"registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_2)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Posibles UPA repetidas"))
Datos.Evaluar |>
dplyr::filter(
dplyr::n() > 1,
.by = c("latitud", "longitud"))
Datos.Evaluar |>
dplyr::filter(
dplyr::n() > 1,
.by = c("latitud", "longitud")) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: Coordenadas repetidas' =
glue::glue(
"Este registro tiene las mismas coordenadas con el número de registro ",
"{registro_menor}.\nRESPUESTA DEL COLECTOR:"),
.by = c("latitud", "longitud"))
Datos.Evaluar |>
dplyr::filter(
dplyr::n() > 1,
.by = c("latitud", "longitud")) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: Coordenadas repetidas' =
glue::glue(
"Este registro tiene las mismas coordenadas con el número de registro ",
"{registro_menor}.\nRESPUESTA DEL COLECTOR:"),
.by = c("latitud", "longitud")) |>
dplyr::filter(.data$registro != .data$registro_menor)
Datos.Evaluar |>
dplyr::filter(
dplyr::n() > 1,
.by = c("latitud", "longitud")) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: Coordenadas repetidas' =
glue::glue(
"Este registro tiene las mismas coordenadas con el número de registro ",
"{registro_menor}.\nRESPUESTA DEL COLECTOR:"),
.by = c("latitud", "longitud")) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Coordenadas repetidas"))
Rev.UPA.Repetidas <- Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_1)) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: UPA repetidas' =
glue::glue(
"Esta encuesta ya está guardada con el número de pre-registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_1)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: UPA repetidas"))
Rev.Posibles.UPA.Repetidas <- Datos.Revisar |>
dplyr::filter(
dplyr::n() > 1,
.by = dplyr::all_of(by_2)) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: Posibles UPA repetidas' =
glue::glue(
"Esta encuesta posiblemente se encuentra repetida con la del ",
"registro {registro_menor}.\n",
"RESPUESTA DEL COLECTOR:"),
.by = dplyr::all_of(by_2)) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Posibles UPA repetidas"))
Rev.UPA.Coordenadas.Repetidas <- Datos.Evaluar |>
dplyr::filter(
dplyr::n() > 1,
.by = c("latitud", "longitud")) |>
dplyr::mutate(
'registro_menor' = suppressWarnings(min(.data$registro)),
'Observaciones: Coordenadas repetidas' =
glue::glue(
"Este registro tiene las mismas coordenadas con el número de registro ",
"{registro_menor}.\nRESPUESTA DEL COLECTOR:"),
.by = c("latitud", "longitud")) |>
dplyr::filter(.data$registro != .data$registro_menor) |>
dplyr::select(c("registro", "Observaciones: Coordenadas repetidas"))
list(Rev.UPA.Repetidas, Rev.Posibles.UPA.Repetidas, Rev.UPA.Coordenadas.Repetidas) |>
purrr::reduce(~ dplyr::full_join(.x, .y, by = dplyr::join_by("registro")))
dplyr::cross_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, z = 31:40) |> dplyr::filter(x == 0))
dplyr::cross_join(tibble::tibble(x = 1:10, y = 11:20), tibble::tibble(x = 1:10, z = 31:40))
devtools::document()
devtools::check()
rm(list = c("Obs_Nombres"))
devtools::check()
library(ObsPreregistro)
list(Rev.UPA.Repetidas, Rev.Posibles.UPA.Repetidas, Rev.UPA.Coordenadas.Repetidas) |>
purrr::reduce(~ dplyr::left_join(.x, .y, by = dplyr::join_by("registro"))) |>
invisible()
list(Rev.UPA.Repetidas, Rev.Posibles.UPA.Repetidas, Rev.UPA.Coordenadas.Repetidas) |>
purrr::reduce(~ dplyr::left_join(.x, .y, by = dplyr::join_by("registro")))
purrr::reduce(.x = list(Rev.UPA.Repetidas, Rev.Posibles.UPA.Repetidas, Rev.UPA.Coordenadas.Repetidas), ~ dplyr::left_join(.x, .y, by = dplyr::join_by("registro")))
devtools::document()
devtools::check()
devtools::check()
library(ObsPreregistro)
D_G_Preregistro("http://sepec.aunap.gov.co/Acuicultura/Informe_Preregistro.csv")
Datos.Preregistro <- D_G_Preregistro("http://sepec.aunap.gov.co/Acuicultura/Informe_Preregistro.csv")
Datos.Preregistro
Datos.Preregistro
